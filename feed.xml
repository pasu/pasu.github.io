<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://pasu.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://pasu.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-10-16T22:11:49+00:00</updated><id>https://pasu.github.io/feed.xml</id><title type="html">blank</title><subtitle>Personal website of Peter Lu </subtitle><entry><title type="html">Terrain</title><link href="https://pasu.github.io/blog/2024/3DGISTerrain/" rel="alternate" type="text/html" title="Terrain"/><published>2024-05-08T11:01:00+00:00</published><updated>2024-05-08T11:01:00+00:00</updated><id>https://pasu.github.io/blog/2024/3DGISTerrain</id><content type="html" xml:base="https://pasu.github.io/blog/2024/3DGISTerrain/"><![CDATA[<p>地形的采集 laser</p> <p>1 DEM/PC: optical and radar</p> <p>2 DT VD</p> <p>3 Representation and conversion / Simplification 、Global digital elevation models</p> <p>5 Topographic properties</p> <p>6 Runoff modelling</p> <p>7 Visibility queries on terrains</p> <p>8 Point cloud processing/ Content/ massive</p> <p>9 hydrographic chart</p>]]></content><author><name></name></author><category term="3DGIS"/><category term="3D"/><category term="GIS"/><category term="Terrain"/><summary type="html"><![CDATA[地形的采集 laser]]></summary></entry><entry><title type="html">Terrain</title><link href="https://pasu.github.io/blog/2024/3DGISEarth/" rel="alternate" type="text/html" title="Terrain"/><published>2024-05-08T11:01:00+00:00</published><updated>2024-05-08T11:01:00+00:00</updated><id>https://pasu.github.io/blog/2024/3DGISEarth</id><content type="html" xml:base="https://pasu.github.io/blog/2024/3DGISEarth/"><![CDATA[<h2 id="地球建模">地球建模</h2> <p>地球并不是一个完美的球体，而是一个不规则的椭球体。地球在赤道的半径略大于极地的半径，因此我们用椭球模型来表示地球的形状。这种椭球模型（例如 WGS84 模型）能比圆球模型提供更高的精度。</p> <p><strong>1. WGS84 概述</strong> WGS84 是世界大地测量系统1984 (World Geodetic System 1984) 的简称，是一种用于全球导航卫星系统的标准化地理坐标系。它基于地球的椭球模型，定义了地球的形状和大小，用来精确地确定全球的坐标。</p> <p><strong>2. 圆球与椭球</strong> 地球的模型可以用球体或椭球体表示。球体模型较为简单，但精度不足。WGS84 使用椭球模型，将地球表示为赤道半径较长、极地半径较短的椭球体。其赤道半径约为 6378137 米，极地半径约为 6356752.3142 米。</p> <p><strong>3. Geodetic 与 Geocentric 的区别</strong></p> <ul> <li><strong>Geodetic 坐标系</strong>：大地坐标系下，纬度定义为垂直于椭球表面的法线与赤道平面的夹角。</li> <li><strong>Geocentric 坐标系</strong>：地心坐标系下，纬度定义为从地球中心指向该点的向量与赤道平面的夹角。</li> </ul> <p>两者在大部分地球表面并不相同，尤其在纬度大于45度的区域，两者的角度差异更为显著。</p> <h3 id="1-geographic-to-wgs84">1. Geographic to WGS84</h3> <p>将地理坐标（经度 $\lambda$，纬度 $\phi$，高度 $h$ 转换为 WGS84 的笛卡尔坐标系$（X, Y, Z）$ 使用以下公式：</p> <p>步骤：</p> <ol> <li> <p>计算法线方向： $ N(\phi) = \frac{a}{\sqrt{1 - e^2 \sin^2(\phi)}} $ 其中，$a$ 是椭球的长半轴（赤道半径），$e$ 是椭球的偏心率，计算公式为： $ e = \sqrt{1 - \frac{b^2}{a^2}} $</p> </li> <li> <p>转换为笛卡尔坐标系：</p> <p>$ X = (N(\phi) + h) \cos(\phi) \cos(\lambda) $</p> <p>$ Y = (N(\phi) + h) \cos(\phi) \sin(\lambda) $</p> <p>$ Z = \left(\left(1 - e^2\right)N(\phi) + h\right) \sin(\phi) $</p> <p>这里，h 是相对于椭球表面的高度。</p> </li> </ol> <h3 id="2-wgs84-to-geographic">2. WGS84 to Geographic</h3> <p>从 WGS84 坐标系 $(X, Y, Z)$转换为地理坐标没有解析解（closed form），因此需要使用迭代方法。Newton-Raphson 方法是常用的一种快速收敛的迭代算法。</p> <h4 id="newton-raphson-方法">Newton-Raphson 方法</h4> <p>迭代方法旨在找到纬度 $\phi$，其基本公式为：</p> <p>$ \phi_{n+1} = \phi_n - \frac{f(\phi_n)}{f’(\phi_n)} $</p> <p>在这个问题中，$f(\phi)$ 表示椭球表面上的几何关系，$f^\prime(\phi)$ 是该函数的导数。通过多次迭代，可以快速接近准确的纬度值。</p> <h3 id="3-椭球曲线">3. 椭球曲线</h3> <p>在椭球面上计算曲线的采样点时，通常根据参数化的曲线表达式，沿曲线均匀或按特定规则分布多个点。一个常见的做法是：</p> <ol> <li>使用椭球的参数方程，指定起点和终点的经纬度。</li> <li>通过插值计算中间点的经度和纬度。</li> <li>对每个插值点，应用 Geographic to WGS84 的转换公式，将地理坐标转换为 WGS84 坐标系下的 $(X, Y, Z)$ 坐标。</li> </ol> <p>这种方法可以确保在椭球表面上生成精确的曲线采样点，用于渲染或进一步计算。</p> <h2 id="精度">精度</h2> <p>在渲染像虚拟地球这样的<strong>大规模环境</strong>时，<strong>精度</strong>至关重要，因为<strong>顶点转换</strong>和<strong>深度缓冲</strong>都会受到<strong>浮点数精度限制</strong>的影响。最常见的问题是顶点转换中的<strong>抖动（jitter）</strong>以及深度缓冲中的<strong>Z-fighting</strong>。这些问题的根源在于32位<strong>浮点数</strong>的有限精度，这种精度在图形应用中被广泛使用。</p> <h3 id="1-简述顶点和深度精度问题">1. 简述顶点和深度精度问题</h3> <ul> <li><strong>顶点精度问题</strong>：由于地球尺度巨大，32位浮点数无法精确表示地表的坐标，导致顶点的精度不足，表现为渲染时物体位置发生轻微抖动（jitter）。</li> <li><strong>深度精度问题</strong>：在设置深度缓冲时，若近远平面范围不当，深度缓冲区的精度不足，可能导致物体之间的深度差异无法正确表示，发生 <strong>Z-fighting</strong> 现象。</li> </ul> <h3 id="2-顶点转换的精度问题">2. 顶点转换的精度问题</h3> <h4 id="jitter-现象的原因"><strong>Jitter</strong> 现象的原因：</h4> <p>浮点数的精度限制会导致世界坐标转换到观察者坐标时出现误差。这些误差在地表或大型场景中累积，尤其是在地球这种大尺度模型中，导致渲染时物体“抖动”。</p> <h4 id="消除jitter的解决方案"><strong>消除Jitter的解决方案</strong>：</h4> <ul> <li> <p><strong>相对于中心渲染</strong> (<strong>Rendering Relative to Center, RTC</strong>)：通过将坐标相对于对象中心点重新计算，使数值更小，减少误差。适用于小对象，但对大对象仍可能有抖动问题。</p> </li> <li> <p><strong>相对于眼睛渲染</strong> (<strong>Rendering Relative to Eye, RTE</strong>)：</p> <ul> <li><strong>CPU上的RTE</strong>：在CPU上使用双精度浮点数进行世界坐标到眼睛坐标的转换。这样可以消除大尺度场景中的抖动，但会带来较大的CPU计算负担。</li> <li><strong>GPU上的RTE</strong>：通过将双精度坐标分解为两个32位浮点数，可以在GPU上模拟双精度计算。这样可以大幅减少抖动，并降低CPU的计算开销。常用算法是<strong>DSFUN90</strong>。</li> </ul> </li> </ul> <p><strong>数学表达</strong>： 对于双精度位置 $(P)$，可以将其表示为高位和低位浮点数的组合：</p> <p>$ P = P_{high} + P_{low}， $</p> <p>其中 $( P_{high} )$ 和 $(P_{low})$ 分别表示双精度位置的高位和低位。</p> <h3 id="3-深度缓冲的精度问题">3. 深度缓冲的精度问题</h3> <h4 id="z-fighting-的原因"><strong>Z-fighting</strong> 的原因：</h4> <p>由于深度缓冲的非线性特性，当场景的<strong>近平面</strong>设得过近或<strong>远平面</strong>设得过远时，深度缓冲的精度无法覆盖整个视锥，导致物体的深度无法正确区分，产生 <strong>Z-fighting</strong> 现象。</p> <p><strong>解决方案</strong>：</p> <ol> <li> <p><strong>调整近平面和远平面</strong>：将近平面尽可能调远，远平面调近，以最大化深度缓冲的有效分辨率。</p> </li> <li> <p><strong>对数深度缓冲</strong> (<strong>Logarithmic Depth Buffering</strong>)： 采用对数深度缓冲，可以使深度值的分布更加均匀，特别适合远距离的渲染场景。在对数深度缓冲中，深度值 $(z)$ 的存储形式为：</p> <p>$ z_{log} = \log(z + 1) $</p> <p>这种方式有效解决了远距离物体的深度精度问题。</p> </li> <li> <p><strong>多视锥体渲染</strong> (<strong>Multiple Frustum Rendering</strong>)： 将场景划分为多个视锥体，每个视锥体有独立的深度缓冲，从而提高远近不同区域的深度精度。</p> </li> <li> <p><strong>W-buffer</strong>： <strong>W-buffer</strong> 是一种线性深度缓冲方式，相较于传统的Z-buffer，它直接使用世界坐标中的深度值 $(w)$，能够有效提高近距离的深度精度。不过，由于其对硬件的要求较高，使用相对较少。</p> </li> </ol> <h3 id="4-总结">4. 总结</h3> <ul> <li><strong>顶点精度</strong>问题主要通过<strong>RTC</strong> 和 <strong>RTE</strong> 技术来缓解，尤其是GPU上模拟双精度运算的<strong>RTE</strong>，能有效解决大尺度场景中的抖动现象。</li> <li><strong>深度精度</strong>问题则依赖于更合理的近平面和远平面设置，以及使用对数深度缓冲和多视锥体渲染等技术来减少<strong>Z-fighting</strong>。</li> </ul> <p>通过结合以上技术，虚拟地球引擎在大尺度环境中的渲染精度问题得到了有效解决，从而保证了场景的视觉稳定性和真实性。</p> <h2 id="地形">地形</h2> <p>地球渲染的第一步就是地形渲染。地形主要基于<strong>高度图</strong> (height maps) 的表示方法，这种方法将每个地形点的高度值以栅格化的方式存储。高度图数据能够通过<strong>法线计算</strong> (normal computation) 来渲染不同的光照效果，同时使用<strong>着色</strong> (shading) 技术使地形表现更加逼真。此外，地形表示还可以包括体素、隐函数等其他方法，但高度图是最为常用的地形表示手段。</p> <p>海量地形渲染的关键在于高效处理和显示大范围、复杂的地形数据。为了解决性能瓶颈和资源管理问题，海量地形渲染主要分为以下四个部分：<strong>细节层次控制 (LOD)</strong>、<strong>预处理</strong>、<strong>出核渲染 (Out-of-Core Rendering)</strong> 和 <strong>剔除 (Culling)</strong>。</p> <h3 id="1-细节层次控制-lod">1. <strong>细节层次控制 (LOD)</strong></h3> <p><strong>LOD (Level of Detail)</strong> 是渲染复杂场景时常用的技术，通过降低远距离或细节不明显的对象复杂度，来提升渲染效率。对于地形来说，LOD的实现包括以下几种方法：</p> <ul> <li> <p><strong>离散LOD</strong>：将地形分割为不同分辨率的网格，根据距离选择合适的LOD版本。较远处的地形使用低分辨率网格，近处则使用高分辨率。</p> </li> <li> <p><strong>连续LOD</strong>：通过连续的细节层次切换，使得地形过渡更加平滑。通常使用<strong>四叉树</strong>或<strong>八叉树</strong>结构存储不同分辨率的地形块。</p> </li> <li> <p><strong>屏幕空间误差</strong> (Screen-Space Error)：LOD的选择基于屏幕上像素级别的误差，确保在降低复杂度的同时，视觉效果不受影响。屏幕空间误差是根据物体与摄像机的距离、视角等参数计算的，通过限制误差范围来保证渲染质量。</p> </li> </ul> <p><strong>Cracking问题</strong>：LOD的边界处常会出现裂缝（Cracking），这是由于不同细节层次之间的顶点对齐问题引起的。为了解决这个问题，通常采用<strong>垂直裙边</strong> (skirts) 或添加额外的顶点对齐不同LOD块的边缘。</p> <h3 id="2-预处理-preprocessing">2. <strong>预处理 (Preprocessing)</strong></h3> <p>为了减少实时渲染时的计算量，在加载海量地形数据之前，预处理是必不可少的。预处理步骤包括：</p> <ul> <li> <p><strong>网格简化</strong>：通过简化算法，减少不重要的顶点或三角形数量，同时保持视觉效果。常见的简化方法包括<strong>网格抽取</strong>（mesh decimation）和<strong>渐进网格</strong>（progressive meshes）。</p> </li> <li> <p><strong>几何和纹理压缩</strong>：大规模地形数据的存储和传输是一个重要的性能瓶颈，因此使用压缩技术至关重要。<strong>几何压缩</strong>可以通过减少顶点和面数据的存储需求来提高性能，而<strong>纹理压缩</strong>（如DXT格式）通过有损压缩减少内存占用和带宽消耗。</p> </li> </ul> <p>这些预处理步骤能有效降低数据的大小，并提高GPU加载和处理的速度。</p> <h3 id="3-出核渲染-out-of-core-rendering">3. <strong>出核渲染 (Out-of-Core Rendering)</strong></h3> <p>海量地形数据通常远超系统内存容量，因此需要通过<strong>出核渲染</strong>技术，仅在渲染时加载当前视图需要的数据。出核渲染的关键包括：</p> <ul> <li> <p><strong>分页</strong>：地形数据被划分为多个块，并在需要时分页加载进内存。随着视角的移动，新的地形块会被逐步加载，而不需要的块则会被卸载，从而节省内存。</p> </li> <li> <p><strong>渐进加载</strong>：为了避免突然出现的加载延迟，分页通常使用渐进加载方式。即先加载较低分辨率的地形数据，然后逐步替换为高分辨率数据。这种方式能够在用户移动视角时保持流畅的体验。</p> </li> </ul> <p>出核渲染确保了地形数据的实时流式加载，使得虚拟地球能够处理超出内存限制的大规模数据集。</p> <h3 id="4-剔除-culling">4. <strong>剔除 (Culling)</strong></h3> <p><strong>剔除</strong>技术用于减少渲染不必要的地形部分，以提升性能。常见的剔除技术包括：</p> <ul> <li> <p><strong>视锥剔除</strong> (View-Frustum Culling)：只渲染视锥体内的地形部分。通过快速计算每个地形块的<strong>边界体</strong>（bounding volume），可以高效地剔除不在摄像机视角中的地形。</p> </li> <li> <p><strong>地平线剔除</strong> (Horizon Culling)：在地球表面渲染时，许多远处的地形块可能位于地平线以下，被地球遮挡。通过地平线剔除，可以避免渲染那些不可见的地形，从而提高性能。</p> </li> </ul> <p>这些剔除技术能够显著减少不必要的渲染计算，提升大规模地形的渲染效率。</p> <p>https://cesium.com/blog/2015/08/04/fast-hierarchical-culling/</p> <p>https://cesium.com/blog/2015/06/24/oriented-bounding-boxes/</p> <p>多源数据</p> <p>S2</p> <p>Open world</p> <p>Fly to the Moon</p> <p>云</p> <p>流体模拟</p> <h3 id="总结">总结</h3> <p>海量地形的渲染依赖于LOD算法、出核渲染和几何clipmapping等技术，保证了在处理复杂和大规模地形时的精度和效率。Chunked LOD与几何clipmapping各有优劣，开发者通常根据实际需求混合使用这些技术，以应对虚拟地球场景的挑战。</p>]]></content><author><name></name></author><category term="3DGIS"/><category term="3D"/><category term="GIS"/><category term="Terrain"/><summary type="html"><![CDATA[地球建模]]></summary></entry><entry><title type="html">感知技术综述</title><link href="https://pasu.github.io/blog/2024/3DGISSensing/" rel="alternate" type="text/html" title="感知技术综述"/><published>2024-04-28T11:01:00+00:00</published><updated>2024-04-28T11:01:00+00:00</updated><id>https://pasu.github.io/blog/2024/3DGISSensing</id><content type="html" xml:base="https://pasu.github.io/blog/2024/3DGISSensing/"><![CDATA[<p>GIS作为空间信息科学（3S）的一部分，与遥感（RS）和全球定位系统（GPS）密切相关。学习3D GIS，需要对RS的感知技术和GPS的定位功能有一定的了解。</p> <p>常见的感知技术有<strong>遥感/声纳</strong>、<strong>激光扫描</strong>和<strong>摄影测量</strong>，通常根据准确度（空间位置、时效、属性）和分辨率来衡量数据质量。</p> <p>宇宙中带电粒子的振动形成电磁波，其具有不同的波长和频率，如无线电波、微波和红外线波长较长，如紫外线、X射线和伽马射线波长较短，而可见光位于这个波长范围的中间。穿过大气层后，电磁波会和空气中的粒子发生碰撞产生散射现象，部分能量也会被（臭氧、水蒸气和二氧化碳）吸收，并与地表不同的物体（如植物，水）发生反射。</p> <p>遥感技术是一种利用传感设备检测地球表面发出的电磁辐射，并对其进行量化的方法生成对应的影像和地形数据。。其中，多波段（multispectral）遥感技术能够同时获取多个光谱带的图像，从而实现对土地覆盖分类、植被健康评估以及矿物勘探等多种应用的表面特征和特性进行详细分析。与Passive传感设备不同，Active传感设备具有自主发射电磁波并进行检测的能力，因此能够穿透云层等障碍物，直接获取地表信息。</p> <p>SAR (Synthetic Aperture Radar) 是一种主动遥感技术，通过发射微波信号并记录其反射来获取地表的影像数据。SAR系统通常搭载在卫星、飞机或无人机上，可在不受天气或光照限制的情况下进行全天候、全天时的地表观测。SAR工作原理是利用雷达发射一系列微波脉冲，并测量这些脉冲在地表上反射回来的信号。通过分析这些反射信号的幅度、相位和时序等信息，可以重建出地表的影像，显示出地表的特征、结构和变化情况。</p> <p>Interferometric SAR (InSAR) 则是一种基于SAR数据的遥感技术，它利用SAR系统连续获取的两幅或多幅影像，通过对这些影像之间的相干性进行干涉处理，从而提取出地表的高程信息和地表变形信息。Interferometric SAR的工作原理是比较两次SAR观测期间的相位差异，这种差异可以表示出地表在垂直方向上的移动或变形情况。通过InSAR技术，可以获取地表的数字高程模型（DEM）和监测地表的形变、沉降、地震、火山活动等地质现象。</p> <p>声纳（SONAR）和雷达在原理上有些相似，都是利用发出信号并接收回波的方式来探测目标。但声纳使用的是声波而非电磁波。多波束声纳（Multibeam SONAR）是一种声纳系统，用于海洋测绘、海底地形成像和海洋资源勘探。与传统的单波束声纳相比，多波束声纳能够同时发射多个声波束，从而在一次测量中获取更广泛的覆盖范围和更详细的地形信息。</p> <p>Airborne Laser Scanning（ALS）是一种激光雷达技术，通过将激光雷达系统安装在飞机或直升机上，从空中对地面进行扫描和测量，生成高分辨率的地形模型（Digital Elevation Model，DEM）或数字地形模型（Digital Terrain Model，DTM），显示出地表的高度、形状和特征。</p> <p>在ALS中，第一个返回的激光脉冲通常与地表中最显著的特征相关，如树梢或建筑物的顶部，因此具有重要意义。而中间返回的脉冲则能提供更丰富的细节信息，尤其是有关植被结构等方面的数据。在Discrete Return LiDAR中，系统记录并处理激光回波信号的首次返回，适用于一般地形测量和简单地物特征提取。而在Full waveform LiDAR中，系统记录并处理完整的激光回波信号波形，提供更详细的数据，适用于更复杂的地形和地物分析。</p> <p>类似于ALS，Terrestrial Laser Scanning（TLS）也是一种激光雷达技术，但它将激光扫描仪安装在地面上，通过地面对目标进行扫描和测量。TLS具有更高的分辨率和地理定位精度，但也受到地形局限性和采集速度的限制。</p> <p>Mobile mapping（车载采集）则是通过移动平台实时采集数据。相比TLS，其精度可能较低，但数据密度更高，能够快速覆盖大范围的地理区域，节省时间和成本。这种技术适用于各种地理和工程应用，例如道路测绘、城市规划和环境监测等。</p> <p>Indoor mobile mapping技术，例如SLAM，是一种专门用于室内环境的移动地图采集技术。由于室内无法使用定位系统，因此通过在建筑内部使用移动平台和各种传感器来获取室内空间的地理信息和结构数据。</p> <p>摄影测量（Photogrammetry）是一种通过摄影和影像处理技术来获取地表和地物的三维空间位置、形状和特征的技术。它利用摄影测量原理，分析影像中的视觉特征和几何关系，推导出地表或地物的几何信息。在这个过程中，正射影像（Orthophoto）起着关键的作用，它经过校正处理，消除了地形变形和投影畸变，具有地图的几何特征。随着正射影像的生成，Dense Matching技术进一步应用，通过对影像进行匹配和配准，获取每个像素的三维坐标信息，生成具有高密度的三维点云模型。</p> <p>倾斜摄影测量是在摄影测量的基础上发展而来的一种技术，它使用具有倾斜摄影能力的航空相机，可以在航空器飞行时以一定的倾斜角度拍摄地面。这种技术可以获取地表的立体影像，具有更强的立体感和视角，能够提供更多的地物信息，并且可以用于三维建模和地形重建等应用。</p> <p>最后，我们来看定位系统。在过去，我们通常提到的定位系统是GPS，即全球定位系统（Global Positioning System）。然而，随着技术的发展，现在我们更多地使用的是全球导航卫星系统（GNSS），其中包括了多个国家和地区的卫星导航系统。除了美国的GPS外，还有俄罗斯的GLONASS、中国的北斗、欧盟的Galileo，以及日本的QZSS和印度的IRNSS/NavIC。这些系统一起构成了一个全球性的导航卫星网络，为我们提供了更加精确和可靠的定位服务。</p> <p>在GNSS系统中，卫星广播时间安排和轨道信息，以及接收设备中获取距离卫星的距离，是利用Range-based positioning计算目标位置所必需的要素。理论上，仅需三颗卫星即可确定位置，但由于时间同步问题和误差影响新增加的时间因子，至少需要四颗卫星来提供冗余数据，确保定位准确性和可靠性。因此，通过测量接收设备与多颗卫星之间的距离，并结合时间和空间信息，可以实现精准的位置定位服务。</p> <p>GNSS提供准确的绝对位置信息，但在某些环境下可能受到干扰。惯性导航系统（INS）利用IMU计算方向、位置和速度，独立于外界干扰。Kalman Filter通过融合GNSS和INS的信息，一方面，基于来自INS的参数提供精确跟踪和预测，同时使用来自全球导航卫星系统计算出的位置和速度数据进行更新，提高导航解决方案的精度和可靠性。这种集成方法充分发挥了GNSS和INS的优势，为导航系统提供了高精度和可靠的定位能力。</p> <p>本文简要总结了遥感（RS）和全球导航卫星系统（GNSS）相关的技术，涵盖了感知技术中的<strong>遥感/声纳</strong>、<strong>激光扫描</strong>和<strong>摄影测量</strong>，以及与定位相关的技术。</p>]]></content><author><name></name></author><category term="3DGIS"/><category term="3D"/><category term="GIS"/><category term="感知"/><summary type="html"><![CDATA[GIS作为空间信息科学（3S）的一部分，与遥感（RS）和全球定位系统（GPS）密切相关。学习3D GIS，需要对RS的感知技术和GPS的定位功能有一定的了解。]]></summary></entry><entry><title type="html">3D GIS是什么</title><link href="https://pasu.github.io/blog/2024/3DGISIntro/" rel="alternate" type="text/html" title="3D GIS是什么"/><published>2024-04-26T23:01:00+00:00</published><updated>2024-04-26T23:01:00+00:00</updated><id>https://pasu.github.io/blog/2024/3DGISIntro</id><content type="html" xml:base="https://pasu.github.io/blog/2024/3DGISIntro/"><![CDATA[<blockquote> <p>A geographic information system (GIS) is a system that creates, manages, analyzes, and maps all types of data. GIS connects data to a map, integrating location data (where things are) with all types of descriptive information (what things are like there). This provides a foundation for mapping and analysis that is used in science and almost every industry. GIS helps users understand patterns, relationships, and geographic context. The benefits include improved communication and efficiency as well as better management and decision making. （直译）地理信息系统 (GIS) 是创建、管理、分析和绘制所有类型数据的系统。 GIS 将数据连接到地图，将位置数据（事物在哪里）与所有类型的描述性信息（事物在哪里）集成。这为科学和几乎每个行业中使用的绘图和分析奠定了基础。 GIS 帮助用户理解模式、关系和地理背景。好处包括改善沟通和效率以及更好的管理和决策。 —Esri</p> </blockquote> <p>GIS包括地理信息（Geographic，如地球表面的特征和位置）和信息系统的技术（information system, 计算机软件/硬件/数据库），用于收集、存储、处理、分析和可视化地理空间数据。3D技术相较于二维，增加了一个维度，为我们提供了更加真实或新颖的方式来理解世界的空间信息。</p> <p>从数学的角度来看，从3D到2D是通过投影来实现降维的过程。投影的本质是在低维空间找到高维数据的最优近似解。例如，将三维地球投影到二维地图上时，不同的投影方法可以保持面积、距离或角度不变，但无法同时满足这三个条件。而从2D到3D则是通过升维来实现数学表达的统一。例如，通过增加一个维度，以4*4矩阵来表达三维空间的变换（如平移、旋转、缩放）。</p> <p>2D的优势也正是3D的劣势所在：</p> <ul> <li>易于传播：成本低，可利用纸质地图等丰富的传播媒介，便于分享和交流。</li> <li>特征突出：通过降维保存重要特征，减少冗余信息，使得信息更易于理解和使用，例如二维导航可以提供实时信息和准确的决策支持。</li> <li>生理局限：人类大脑对于高维空间的理解能力有限，较难感知和处理超过三维以上的空间信息，例如前庭系统导致VR下的不舒适。</li> </ul> <p>毕竟我们所处的物理空间是三维的，因此3D的优势在于能够真实地表达地理信息，实现对空间的完整呈现。随着技术的不断发展，3D的劣势也在不断地得到改善。个人认为，3D GIS存在主要价值的三个方面是：</p> <ul> <li>Modelling the world</li> <li>Realistic and immersive experience</li> <li>Spatial Analysis</li> </ul> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/3dgis/DTMs-480.webp 480w,/assets/img/3dgis/DTMs-800.webp 800w,/assets/img/3dgis/DTMs-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/3dgis/DTMs.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> 从采集开始，数据建模涵盖了不同维度下的需求：地形（2.5D建模）、三维模型（2.75D建模），以及提取模型特征和属性（3D建模），实现了从2D到3D的数据建模升级。 </div> <p>如上图所示，整个建模过程中都离不开计算机图形学和视觉等技术与GIS的结合。在不同场景下，数据格式（如Voxel、Mesh、Point Cloud）和规范（如CityJson、BIM）等内容推动着GIS生态的完善，例如通过开源、OGC以及ISO 191XX系列等地理信息标准。毫无疑问，GIS的核心就是数据建模。</p> <p>GIS数据的可视化技术与图形学密切相关，通过逼真的渲染技术展现复杂的地理空间数据。借助物理模型模拟天气环境（如河流等），利用XR技术提供更沉浸式的体验，三维空间下高效的人机交互设计来最大化挖掘GIS数据的价值。</p> <p>最后，3D GIS可以提供更准确的空间分析，例如日照分析，可视域分析和天际线分析。通过可视化的结果展示，能够为决策提供更全面的分析支持。</p> <p>在不同领域中，3D GIS的这些价值也有着广泛的现实应用，并持续深入。</p> <p>在大众消费领域，Google利用Earth和Maps实现了“通过地理整理全世界的信息”的愿景。通过街景和视觉技术，他们注释了整个地球，实现了“让物理世界可被搜索”的目标。近些年，他们还陆续提出了Big Query和Immersive View等空间分析和可视化的优化方案。<a href="https://mp.weixin.qq.com/s/tn71F425_KvmiuJRslbHBQ">阅读更多</a></p> <p>在企业服务领域，SuperMap（我的前公司）也提供了全面的3D GIS技术解决方案。产品体系涵盖了从三维数据的优化与管理，到海量数据的多端展现和空间分析。这些解决方案在政务、交通、城市等多个行业都得到了广泛的应用。</p> <p>在开源生态中，Cesium提供了全球三维数据资产，并积极地将其3D GIS能力与各个生态系统（如UE/Unity等）对接。在研究领域，metaverse正在构建物理世界和虚拟世界之间的桥梁，推动了真实世界数据建模的数字化和虚拟化进程。智慧城市利用3D技术提高对城市的理解，实现了大规模城市重建，并应用于自动驾驶的实时3D传感技术、建筑物和室外环境的3D表示，以及新气候和能源模拟的智慧城市创新和实验。</p> <p>本文是个人对3D GIS的理解：2D和3D的区别，以及3D GIS的主要价值和不同领域的应用场景。3D GIS的诸多方面可以让这个世界变得更好。</p> <p>只是，这个世界会好吗？</p> <p>我不是很确定。</p>]]></content><author><name></name></author><category term="3DGIS"/><category term="3D"/><category term="GIS"/><category term="简介"/><summary type="html"><![CDATA[A geographic information system (GIS) is a system that creates, manages, analyzes, and maps all types of data. GIS connects data to a map, integrating location data (where things are) with all types of descriptive information (what things are like there). This provides a foundation for mapping and analysis that is used in science and almost every industry. GIS helps users understand patterns, relationships, and geographic context. The benefits include improved communication and efficiency as well as better management and decision making. （直译）地理信息系统 (GIS) 是创建、管理、分析和绘制所有类型数据的系统。 GIS 将数据连接到地图，将位置数据（事物在哪里）与所有类型的描述性信息（事物在哪里）集成。这为科学和几乎每个行业中使用的绘图和分析奠定了基础。 GIS 帮助用户理解模式、关系和地理背景。好处包括改善沟通和效率以及更好的管理和决策。 —Esri]]></summary></entry><entry><title type="html">3D GIS入门指南</title><link href="https://pasu.github.io/blog/2024/3DGISLearning/" rel="alternate" type="text/html" title="3D GIS入门指南"/><published>2024-04-21T11:01:00+00:00</published><updated>2024-04-21T11:01:00+00:00</updated><id>https://pasu.github.io/blog/2024/3DGISLearning</id><content type="html" xml:base="https://pasu.github.io/blog/2024/3DGISLearning/"><![CDATA[<p>3D GIS，顾名思义，要求具备一定的CG（计算机图形学）知识，包括几何学、渲染和模拟等物理建模内容。GIS则涉及地理信息领域，如地形、建筑物和天气等地球尺度下的数据。因此，3D GIS的核心是对物理世界的建模。从开发角度来看，需要具备基本的编程能力，如C++、JS（WebGL/WebGPU）、Shader编程以及性能优化（CPU/GPU）。而3D GIS的研发人员也需要掌握以上三个领域的知识。</p> <p>学习3D GIS存在两个主要挑战：一是知识点繁多且相互交错，难以建立扎实的基础和知识体系；二是从业人员大多来自Web GIS背景，对于C++相关技术如GL和Shader的掌握参差不齐。这些因素使得3D GIS容易上手却难以精通。</p> <p>首先，掌握OpenGL是基本功，<a href="https://learnopengl.com/">Learn OpenGL</a>是一个不错的教程。如果学习OpenGL还有难度，可以先从WebGL入门，比如《WebGL编程指南》，之后再开始OpenGL的学习，图形学比较感兴趣的话，结合看看<a href="https://sites.cs.ucsb.edu/~lingqi/teaching/games101.html">GAMES 101:现代计算机图形学入门</a>。OpenGL/WebGL的优点是学习资料丰富，缺点是属于比较成熟或过时的技术，现在学习有点鸡肋。如果你工作中并不需要使用它们，那么Cuda/Vulkan/DX/WebGPU也是可以考虑的替代方案。目的是掌握基本的编程能力和图形学的基本概念。</p> <p>其次，在这个基础上，需要掌握基本的GIS知识。通常需要了解构建一个地球模型的基本概念。个人觉得通过<a href="https://www.cnblogs.com/fuckgiser/p/5706842.html">Cesium教程</a>以及学习《3D Engine Design for Virtual Globes》是一个不错的方式。Cesium的代码开源，结合Virtual Globes以及对应的源码，目标是掌握构建一个地球模型的基本概念，以及如何应用GL技术来实现该地球模型。</p> <p>最后，拥有这些基础并不意味着我们已经建立了坚实的根基。实际情况往往是在工作推动下，我们解决问题的一知半解。这些问题可能涉及到我们对数学物理等理论知识的欠缺，或者是对算法或开源库的不了解。这些问题是很好的试金石，我们才能发现自己知识体系中的盲区，并有针对性地完善自己。在这个过程中，我们将接触到许多优秀的技术文章、产品和专家，了解他们的学习和思考方式，以及他们关注的问题和前沿技术。这将拓宽我们的认知，调整我们的技术发展方向，比如游戏引擎或AI等相关技术。我们的目标是实现工作和学习的双赢，营造一个良好的学习氛围和环境，持续推动个人的提升。</p> <p>另外，团队成员之间的交流也是必不可少的。在我的学习过程中，我从许多人那里得到了指导和帮助。我个人认为定期的技术交流是值得投入的事情。可以分享自己在工作中解决的问题，也可以分享自己对感兴趣的知识点的理解，通过讲座或讨论会的形式。</p> <p>以上是我个人总结的3D GIS入门简要指南，学少而精，思活而辩。3D GIS行业的发展也离不开每一位从业者的努力。</p>]]></content><author><name></name></author><category term="3DGIS"/><category term="3D"/><category term="GIS"/><category term="入门"/><summary type="html"><![CDATA[3D GIS，顾名思义，要求具备一定的CG（计算机图形学）知识，包括几何学、渲染和模拟等物理建模内容。GIS则涉及地理信息领域，如地形、建筑物和天气等地球尺度下的数据。因此，3D GIS的核心是对物理世界的建模。从开发角度来看，需要具备基本的编程能力，如C++、JS（WebGL/WebGPU）、Shader编程以及性能优化（CPU/GPU）。而3D GIS的研发人员也需要掌握以上三个领域的知识。]]></summary></entry></feed>